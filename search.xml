<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[安装MongoDB]]></title>
    <url>%2F2019%2F05%2F30%2F%E5%AE%89%E8%A3%85MongoDB%2F</url>
    <content type="text"><![CDATA[Windows下安装 MongoDB点击MongoDB下载并安装(不勾选安装MongoDB Compass，因为网络问题可能很长时间都在执行安装，直接在官网手动下载MongoDB Compass并安装)。默认安装在C:\Program Files\MongoDB下，在系统环境变量path下添加C:\Program Files\MongoDB\Server\4.0\bin路径。打开命令行输入mongod 1234567891011121314151617C:\Users\cookiepeace&gt;mongod2019-05-29T09:33:12.904-0700 I CONTROL [main] Automatically disabling TLS 1.0, to force-enable TLS 1.0 specify --sslDisabledProtocols &apos;none&apos;2019-05-29T09:33:12.907-0700 I CONTROL [initandlisten] MongoDB starting : pid=12044 port=27017 dbpath=C:\data\db\ 64-bit host=DESKTOP-2OOPGVS2019-05-29T09:33:12.907-0700 I CONTROL [initandlisten] targetMinOS: Windows 7/Windows Server 2008 R22019-05-29T09:33:12.907-0700 I CONTROL [initandlisten] db version v4.0.92019-05-29T09:33:12.907-0700 I CONTROL [initandlisten] git version: fc525e2d9b0e4bceff5c2201457e5643629097652019-05-29T09:33:12.907-0700 I CONTROL [initandlisten] allocator: tcmalloc2019-05-29T09:33:12.907-0700 I CONTROL [initandlisten] modules: none2019-05-29T09:33:12.907-0700 I CONTROL [initandlisten] build environment:2019-05-29T09:33:12.908-0700 I CONTROL [initandlisten] distmod: 2008plus-ssl2019-05-29T09:33:12.908-0700 I CONTROL [initandlisten] distarch: x86_642019-05-29T09:33:12.908-0700 I CONTROL [initandlisten] target_arch: x86_642019-05-29T09:33:12.908-0700 I CONTROL [initandlisten] options: &#123;&#125;2019-05-29T09:33:12.908-0700 I STORAGE [initandlisten] exception in initAndListen: NonExistentPath: Data directory C:\data\db\ not found., terminating2019-05-29T09:33:12.909-0700 I NETWORK [initandlisten] shutdown: going to close listening sockets...2019-05-29T09:33:12.909-0700 I CONTROL [initandlisten] now exiting2019-05-29T09:33:12.909-0700 I CONTROL [initandlisten] shutting down with code:100 错误initAndListen: NonExistentPath: Data directory C:\data\db\ not found., terminating提示C:\data\db\路径不存在。 1C:\Users\cookiepeace&gt;md c:\data\db 输入该命令创建目录。然后再执行一次12345678910111213141516171819202122232425262728293031323334353637```C:\Users\cookiepeace&gt;mongod2019-05-29T09:40:25.537-0700 I CONTROL [main] Automatically disabling TLS 1.0, to force-enable TLS 1.0 specify --sslDisabledProtocols &apos;none&apos;2019-05-29T09:40:25.540-0700 I CONTROL [initandlisten] MongoDB starting : pid=10184 port=27017 dbpath=C:\data\db\ 64-bit host=DESKTOP-2OOPGVS2019-05-29T09:40:25.540-0700 I CONTROL [initandlisten] targetMinOS: Windows 7/Windows Server 2008 R22019-05-29T09:40:25.541-0700 I CONTROL [initandlisten] db version v4.0.92019-05-29T09:40:25.542-0700 I CONTROL [initandlisten] git version: fc525e2d9b0e4bceff5c2201457e5643629097652019-05-29T09:40:25.542-0700 I CONTROL [initandlisten] allocator: tcmalloc2019-05-29T09:40:25.542-0700 I CONTROL [initandlisten] modules: none2019-05-29T09:40:25.543-0700 I CONTROL [initandlisten] build environment:2019-05-29T09:40:25.543-0700 I CONTROL [initandlisten] distmod: 2008plus-ssl2019-05-29T09:40:25.543-0700 I CONTROL [initandlisten] distarch: x86_642019-05-29T09:40:25.544-0700 I CONTROL [initandlisten] target_arch: x86_642019-05-29T09:40:25.544-0700 I CONTROL [initandlisten] options: &#123;&#125;2019-05-29T09:40:25.546-0700 I STORAGE [initandlisten] wiredtiger_open config: create,cache_size=7658M,session_max=20000,eviction=(threads_min=4,threads_max=4),config_base=false,statistics=(fast),log=(enabled=true,archive=true,path=journal,compressor=snappy),file_manager=(close_idle_time=100000),statistics_log=(wait=0),verbose=(recovery_progress),2019-05-29T09:40:25.570-0700 I STORAGE [initandlisten] WiredTiger message [1559148025:569655][10184:140725009992784], txn-recover: Set global recovery timestamp: 02019-05-29T09:40:25.576-0700 I RECOVERY [initandlisten] WiredTiger recoveryTimestamp. Ts: Timestamp(0, 0)2019-05-29T09:40:25.611-0700 I CONTROL [initandlisten]2019-05-29T09:40:25.611-0700 I CONTROL [initandlisten] ** WARNING: Access control is not enabled for the database.2019-05-29T09:40:25.613-0700 I CONTROL [initandlisten] ** Read and write access to data and configuration is unrestricted.2019-05-29T09:40:25.615-0700 I CONTROL [initandlisten]2019-05-29T09:40:25.616-0700 I CONTROL [initandlisten] ** WARNING: This server is bound to localhost.2019-05-29T09:40:25.616-0700 I CONTROL [initandlisten] ** Remote systems will be unable to connect to this server.2019-05-29T09:40:25.616-0700 I CONTROL [initandlisten] ** Start the server with --bind_ip &lt;address&gt; to specify which IP2019-05-29T09:40:25.617-0700 I CONTROL [initandlisten] ** addresses it should serve responses from, or with --bind_ip_all to2019-05-29T09:40:25.619-0700 I CONTROL [initandlisten] ** bind to all interfaces. If this behavior is desired, start the2019-05-29T09:40:25.619-0700 I CONTROL [initandlisten] ** server with --bind_ip 127.0.0.1 to disable this warning.2019-05-29T09:40:25.620-0700 I CONTROL [initandlisten]2019-05-30T00:40:25.621+0800 I STORAGE [initandlisten] createCollection: admin.system.version with provided UUID: 42182d31-fb88-424e-b0aa-23a06e8558582019-05-30T00:40:25.638+0800 I COMMAND [initandlisten] setting featureCompatibilityVersion to 4.02019-05-30T00:40:25.646+0800 I STORAGE [initandlisten] createCollection: local.startup_log with generated UUID: 6e6c1307-6143-40d2-b2b2-ec25120c968d2019-05-30T00:40:25.913+0800 I FTDC [initandlisten] Initializing full-time diagnostic data capture with directory &apos;C:/data/db/diagnostic.data&apos;2019-05-30T00:40:25.916+0800 I NETWORK [initandlisten] waiting for connections on port 270172019-05-30T00:40:25.916+0800 I STORAGE [LogicalSessionCacheRefresh] createCollection: config.system.sessions with generated UUID: ad8615f7-b9f1-4b48-95e5-0717b02958d02019-05-30T00:40:25.932+0800 I INDEX [LogicalSessionCacheRefresh] build index on: config.system.sessions properties: &#123; v: 2, key: &#123; lastUse: 1 &#125;, name: &quot;lsidTTLIndex&quot;, ns: &quot;config.system.sessions&quot;, expireAfterSeconds: 1800 &#125;2019-05-30T00:40:25.932+0800 I INDEX [LogicalSessionCacheRefresh] building index using bulk method; build may temporarily use up to 500 megabytes of RAM2019-05-30T00:40:25.936+0800 I INDEX [LogicalSessionCacheRefresh] build index done. scanned 0 total records. 0 secs 打开MongoDB Compass一路next后点击connect。]]></content>
      <categories>
        <category>Web</category>
        <category>Node.js</category>
        <category>Mongoose</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Mongoose 的增删改查（CRUD）]]></title>
    <url>%2F2019%2F05%2F30%2FMongoose%20%E7%9A%84%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5%EF%BC%88CRUD%EF%BC%89%2F</url>
    <content type="text"><![CDATA[连接 MongoDB12345const mongoose = require('mongoose');mongoose.connect('mongodb://localhost/myapp', &#123;useNewUrlParser:true&#125;) .then(() =&gt; console.log('Connected to MongoDB...')) .catch(err =&gt; console.error('Connected failed', err)); Schema1234567const courseSchema = new mongoose.Schema(&#123; name: String, author: String, tags: [String], date: &#123;type: Date, default: Date.now&#125;, isPublished: Boolean&#125;); Schema 定义了 collection 中 document 的结构。 mongoDB 中 collection 相当于关系数据库的 table，而 document 则是其中的一条数据，相当于 table 中的 row。 Model 和 Document1const Course = new mongoose.model('Course', courseSchema); Model 是从 Schema 编译来的构造函数。 它们的实例就代表着可以从数据库保存和读取的 documents。 从数据库创建和读取 document 的所有操作都是通过 model 进行的。 保存 Document1234567891011async function createCourse() &#123; const course = new Course(&#123; name: 'Node.js Course', author: 'Mosh', tags: ['node', 'backend'], isPublished: true &#125;) const result = await course.save(); console.log(result);&#125;createCourse(); 操作数据库属于是异步操作，使用异步编程。 查询 Document123456789async function getCourse() &#123; const courses = await Course .find(&#123;author: 'Mosh', isPublished: true&#125;) .limit(10) .sort(&#123;name: 1&#125;) .select(&#123;name: 1, tags: 1&#125;); console.log(courses);&#125;getCourse(); fing() 设置需要匹配的属性。 limit() 设置返回的数量。 sort() 按照指定属性排序，1表示升序，-1表示降序。 select() 设置需要返回属性。 使用查询运算符123456789101112131415161718192021async function getCourse() &#123; // eq (equal) // ne (not equal) // gt (greater than) // gte (greater than or equal to) // lt (less than) // lte (less than or equal to) // in // nin (not in) const courses = await Course // .find(&#123;author: 'Mosh', isPublished: true&#125;) // .find(&#123; price: &#123; $gte: 10, $lte: 20 &#125; &#125;) .find(&#123; price: &#123; $in: [10, 15, 20] &#125; &#125;) .limit(10) .sort(&#123; name: 1 &#125;) .select(&#123; name: 1, tags: 1 &#125;); console.log(courses);&#125;getCourse(); 使用or和and方法查询12345678910async function getCourse() &#123; const courses = await Course .find() .or([ &#123; author: 'Mosh' &#125;, &#123; isPublished: true &#125; ]) .and([ &#123;author: 'Mosh', isPublished: true&#125; ]) .limit(10) .sort(&#123;name: 1&#125;) .select(&#123;name: 1, tags: 1&#125;); console.log(courses);&#125; 使用正则表达式查询12345678910async function getCourse() &#123; const courses = await Course .find(&#123; author: /^Mosh/ &#125;) .find(&#123; author: /Hanmedani$/i &#125;) .find(&#123; author: /.*Mosh.*/ &#125;) .limit(10) .sort(&#123;name: 1&#125;) .select(&#123;name: 1, tags: 1&#125;); console.log(courses);&#125; 获取查询的条数，使用 count() 方法12345678async function getCourse() &#123; const courses = await Course .find(&#123;author: 'Mosh', isPublished: true&#125;) .limit(10) .sort(&#123;name: 1&#125;) .count(); console.log(courses);&#125; 查询分页操作，使用 skin() 方法123456789101112async function getCourse() &#123; const pageNumber = 2; const pageSize = 10; const courses = await Course .find(&#123;author: 'Mosh', isPublished: true&#125;) .skip((pageNumber - 1) * pageSize) .limit(pageSize) .sort(&#123;name: 1&#125;) .count(); console.log(courses);&#125; 注意 limit() 方法也要传入pageSize 更新 Document123456789101112131415161718192021222324252627//第一种方式async function updateCourse(id) &#123; const course = await Course.findById(id); if (!course) return; course.isPublished = true; course.author = 'Another Author'; const result = await course.save(); console.log(result);&#125;//第二种方式async function updateCourse(id) &#123; // const result = await Course.update(&#123; _id: id &#125;, &#123; // $set: &#123; // author: 'Mosh', // isPublished: false // &#125; // &#125;); const result = await Course.findByIdAndUpdate(id, &#123; $set: &#123; author: 'Jack', isPublished: true &#125; &#125;, &#123; new : true &#125;); console.log(result);&#125; Course.update() 返回的是操作结果，例如{ n: 1, nModified: 0, ok: 1 }。 如果需要返回修改的对象，使用 Course.findByIdAndUpdate() 方法，第三个参数{ new : true}表示的是返回修改后的对象，如果设置为false则会返回修改前的对象。 More info: Update Operator(更新操作符)。 删除 Document123456async function removeCourse(id) &#123; const result = await Course.deleteOne(&#123; _id: id &#125;); // const result = await Course.deleteMany(&#123; _id: id &#125;); // const result = await Course.findByIdAndRemove(&#123; _id: id &#125;); console.log(result);&#125; 需要返回被删除的对象使用 Course.findByIdAndRemove() 方法，查找不到需要删除的对象会返回null。]]></content>
      <categories>
        <category>Web</category>
        <category>Node.js</category>
        <category>Mongoose</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[JavaScript异步]]></title>
    <url>%2F2019%2F05%2F29%2FJavaScript%E5%BC%82%E6%AD%A5%2F</url>
    <content type="text"><![CDATA[Promise123456789101112131415161718192021222324252627282930313233getUser(1) .then(user =&gt; getRepositories(user.gitHubUsername)) .then(repos =&gt; getCommits(repos[1])) .then(commits =&gt; console.log('Complete.')) .catch(err =&gt; console.log('err' + err.message));function getUser(id) &#123; return new Promise((resolve, reject) =&gt; &#123; setTimeout(() =&gt; &#123; console.log('getUser'); // reject(new Error('message')); resolve(&#123;id: id, gitHubUsername: 'user1'&#125;); &#125;, 1000); &#125;);&#125;function getRepositories(username) &#123; return new Promise((resolve, reject) =&gt; &#123; setTimeout(() =&gt; &#123; console.log('getRepositories'); resolve(['repo1', 'repo2', 'repo3']); &#125;, 1000); &#125;);&#125;function getCommits(repo) &#123; return new Promise((resolve, reject) =&gt; &#123; setTimeout(() =&gt; &#123; console.log('getCommits'); resolve(['commit1', 'commit2', 'commit3']); &#125;, 1000); &#125;);&#125; await 和 async123456789101112async function displayCommits() &#123; try&#123; const user = await getUser(1); const repos = await getRepositories(user.gitHubUsername); const commits = await getCommits(repos[1]); console.log('Complete.') &#125; catch (err) &#123; console.log('err' + err.message); &#125;&#125;displayCommits();]]></content>
      <categories>
        <category>Programming</category>
        <category>JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Git使用总结]]></title>
    <url>%2F2019%2F04%2F26%2FGit%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%2F</url>
    <content type="text"><![CDATA[克隆现有的仓库1$ git clone https://github.com/libgit2/libgit2 在现有项目中初始化仓库，需要使用如下几个命令123456789101112131415161718$ git init $ git remote add origin git@github.com:congkaiwu/test.git $ git remote -v origin git@github.com:congkaiwu/test.git (fetch)origin git@github.com:congkaiwu/test.git (push)$ git fetchremote: Enumerating objects: 9, done.remote: Counting objects: 100% (9/9), done.remote: Compressing objects: 100% (5/5), done.remote: Total 9 (delta 0), reused 6 (delta 0), pack-reused 0Unpacking objects: 100% (9/9), done.From github.com:congkaiwu/test * [new branch] master -&gt; origin/master$ git checkout master $ git init 初始化仓库，在当前目录下创建一个.git文件。 $ git remote add [name] [url] 添加一个新的远程 Git 仓库，同时指定一个仓库简写名称，使用clone命令时默认名称为 origin 。 可以添加多个远程仓库。 $ git remote -v 列出远程仓库使用的 Git 保存的简写与其对应的 URL。 不使用-v选项则只列出仓库的简写名称 $ git fetch 这个命令会访问远程仓库，从中拉取所有你还没有的数据。 执行完成后，你将会拥有那个远程仓库中所有分支的引用，可以随时合并或查看。 $ git checkout master 检出 master 分支。 跟踪/暂存/提交1234567$ git status$ git add newFile.txt$ git commit -m &quot;add newFile.txt&quot;$ git rm newFile.txt $ git status 检查当前文件状态。 项目中添加或修改文件，需要使用命令 $ git add 跟踪并暂存本次修改。 git commit -m &quot;add new File.txt&quot; 提交当前改动，-m选项添加本次提交的描述。 git rm newFile.txt 删除文件 查看提交历史，回退1234567891011121314151617181920212223242526$ git log --since=2.weeks --pretty=oneline30a3e17c27196f086b45e31cc0446d0f8b113ef1 (HEAD -&gt; master) del new.txt6614fd3a91290f343b416f5450a6fcda56f40b2a add newFile.txtadaa9611013e8cb93261e2a134d3e0e52fa18731 (origin/master) add 11119fb179a35d8ef8c3424fe50e02fe1ecb6eb5d86f aace7c393e245a6ace32cc200a52486d3fcd8bff4 Initial commit$ git log --pretty=format:&quot;%h - %an, %ar : %s&quot; -230a3e17 - congkaiwu, 5 minutes ago : del new.txt6614fd3 - congkaiwu, 41 minutes ago : add newFile.txt$ git log --grep=add --author=congkaiwu --all-matchcommit 6614fd3a91290f343b416f5450a6fcda56f40b2aAuthor: congkaiwu &lt;congkaiwu@gmail.com&gt;Date: Fri Apr 26 08:03:06 2019 +0800 add newFile.txtcommit adaa9611013e8cb93261e2a134d3e0e52fa18731 (origin/master)Author: congkaiwu &lt;congkaiwu@gmail.com&gt;Date: Thu Apr 25 22:37:40 2019 +0800 add 1111$ git reset --hard ace7cHEAD is now at ace7c39 Initial commit $ git log --since=2.weeks --pretty=oneline 查询提交历史，按时间列出所有改动，最近的时间在上面。--since=2.weeks 查询2周以内的提交。 --pretty=oneline 每条结果显示为1行。 $ git log --pretty=format:&quot;%h - %an, %ar : %s&quot; -2 也可以格式化查询结果。-2表示显示最近的2条数据。 $ git log --grep=add --author=congkaiwu --all-match 查询关键字 --grep=，作者 --author= ，同时满足作者和关键字条件需要增加选项--all-match 。 $ git reset --hard ace7c 该命令回退到ace7c这个节点。 分支新建与合并，删除123456789101112131415161718192021$ git branch -a* master remotes/origin/master$ git checkout -b iss53Switched to a new branch &apos;iss53&apos;$ git checkout masterSwitched to branch &apos;master&apos;Your branch is behind &apos;origin/master&apos; by 2 commits, and can be fast-forwarded. (use &quot;git pull&quot; to update your local branch)$ git merge iss53Updating 8d49b2b..6853154Fast-forward newFile.txt | 0 1 file changed, 0 insertions(+), 0 deletions(-) create mode 100644 newFile.txt$ git branch -d iss53Deleted branch iss53 (was 8d49b2b). $ git branch -a 列出本地分支和远程分支，-r 则单独列出远程分支，-v 可以查询每个分支最后一次提交。 $ git checkout -b iss53 创建分支 iss53 并切换到该分支。 $ git checkout master 切换到分支 master。 $ git merge iss53 合并分支。 $ git branch -d iss53 删除分支iss53。 第一次将本地项目推送到github1234567891011121314151617181920212223242526272829303132333435363738394041424344$ git initInitialized empty Git repository in D:/WebProjects/express-demo/.git/$ git add .warning: LF will be replaced by CRLF in package-lock.json.The file will have its original line endings in your working directorywarning: LF will be replaced by CRLF in package.json.The file will have its original line endings in your working directory$ git commit -m &apos;First commit.&apos;[master 128688c] First commit. 9 files changed, 636 insertions(+) create mode 100644 .gitignore create mode 100644 index.js create mode 100644 middleware/authentication.js create mode 100644 middleware/logger.js create mode 100644 package-lock.json create mode 100644 package.json create mode 100644 public/readme.txt create mode 100644 routes/courses.js create mode 100644 routes/home.js$ git remote add origin git@github.com:congkaiwu/express-demo.git$ git pull --rebase origin masterremote: Enumerating objects: 3, done.remote: Counting objects: 100% (3/3), done.remote: Total 3 (delta 0), reused 0 (delta 0), pack-reused 0Unpacking objects: 100% (3/3), done.From github.com:congkaiwu/express-demo * branch master -&gt; FETCH_HEAD * [new branch] master -&gt; origin/master$ git push origin master -uEnumerating objects: 15, done.Counting objects: 100% (15/15), done.Delta compression using up to 8 threadsCompressing objects: 100% (11/11), done.Writing objects: 100% (14/14), 7.21 KiB | 738.00 KiB/s, done.Total 14 (delta 1), reused 0 (delta 0)remote: Resolving deltas: 100% (1/1), done.To github.com:congkaiwu/express-demo.git eb1c5dd..128688c master -&gt; masterBranch &apos;master&apos; set up to track remote branch &apos;master&apos; from &apos;origin&apos;. 在本地项目下使用git init初始化，git add .暂存改动，git commit -m &#39;First commit.&#39;提交。 在GitHub上创建仓库并链接到本地项目$ git remote add origin git@github.com:congkaiwu/express-demo.git。 创建时如果勾选了README文件，则用$ git pull --rebase origin master命令合并到本地。 首次推送使用$ git push origin master -u。 More info: Git官方文档]]></content>
      <categories>
        <category>Git</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2019%2F04%2F25%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
